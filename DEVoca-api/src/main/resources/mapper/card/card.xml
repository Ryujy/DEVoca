<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.devoca.card.model.mapper.CardMapper">

    <!--  CardDTO 매핑 -->
    <resultMap id="CardDTOResultMap" type="CardDTO">
        <result property="userId" column="user_id"/>
        <result property="userNickName" column="user_nickname"/>
        <result property="userIntro" column="user_intro"/>
        <result property="userImg" column="user_img"/>

        <result property="wordId" column="word_id"/>
        <result property="wordNameKr" column="word_name_kr"/>
        <result property="wordNameEn" column="word_name_en"/>
        <result property="wordSumm" column="word_summ"/>
        <result property="wordCategory" column="category_name"/>

        <result property="originCardId" column="card_origin_card_id"/>
        <result property="originUserNickName" column="card_origin_user_nickname"/>
        <result property="originUserImg" column="card_origin_user_img"/>
        <result property="originCardContent" column="card_origin_card_content"/>

        <result property="cardId" column="card_id"/>
        <result property="cardContent" column="card_content"/>
        <result property="cardLikeYN" column="card_like_yn"/>
        <result property="cardLikeCnt" column="card_like_cnt"/>
        <result property="cardRepostCnt" column="card_repost_cnt"/>
        <result property="cardLink" column="card_link"/>
        <result property="cardRelatedKeyword" column="card_related_keyword"/>
        <result property="cardRegistDate" column="card_regist_date"/>
        <result property="cardUpdateDate" column="card_update_date"/>
    </resultMap>

    <!--  userId로 userIdx 불러오기  -->
    <sql id="userIdxLoad">
        select user_idx from users where user_id = #{userId}
    </sql>

    <!--  watcherID로 userIdx 불러오기  -->
    <sql id="watcherIdxLoad">
        select user_idx from users where user_id = #{watcherId}
    </sql>

    <!--  watcherId가 follow하는 userIdx 불러오기  -->
    <sql id="userFollowIdx">
        select u.user_idx
        from users u right join follows f
        on u.user_idx = f.follow_to
        where f.follow_from = (<include refid="watcherIdxLoad"></include>)
        union
        <include refid="watcherIdxLoad"></include>
    </sql>

    <!--  단어 카테고리 1개 불러오기  -->
    <sql id="wordCategoryLoad">
        select c.category_name
        from words_categories wc join categories c
            on c.category_id = wc.wc_category_id
        where c.category_id = word_id
            limit 1
    </sql>

    <!--  재게시 원본 카드 작성자 정보 불러오기  -->
    <sql id="originUserInfoLoad">
        from users u join cards c
			on u.user_idx = c.fk_card_user_idx
            where c.card_id = oci
    </sql>

    <!--  카드 등록  -->
    <select id="registerCard" parameterType="CardDTO">
        insert into cards (fk_card_user_idx, card_word_id, card_content, card_link, card_related_keyword)
        values((<include refid="userIdxLoad"></include> and user_revoke_date is null), #{wordId}, #{cardContent}, #{cardLink}, #{cardRelatedKeyword});
    </select>

    <!--  카드 수정  -->
    <update id="updateCard" parameterType="CardDTO">
        update cards
            set card_content = #{cardContent},
                card_link = #{cardLink},
                card_related_keyword = #{cardRelatedKeyword},
                card_update_date = now()
        where card_id = #{cardId};
    </update>

    <!--  카드 삭제  -->
    <update id="deleteCard" parameterType="int">
        update cards
        set card_delete_date = now()
        where card_id = #{cardId};
    </update>

    <!--  카드 상세 조회 : 향후 이용자 user_id 세션에서 뽑아와 "aabbccc"에 투입  -->
    <select id="getCardDetail" parameterType="int" resultMap="CardDTOResultMap">
        select user_id, user_nickname, user_intro, user_img,
               word_id, word_name_kr, word_name_en, word_summ,
               (<include refid="wordCategoryLoad"></include>) as word_category,
               card_origin_card_id, card_origin_card_id as oci,
               (select u.user_nickname <include refid="originUserInfoLoad"></include>) as card_origin_user_nickname,
               (select u.user_img <include refid="originUserInfoLoad"></include>) as card_origin_user_img,
               (select card_content
                    from cards
                    where card_id = oci) as card_origin_card_content,
               card_id, card_content,
               ifnull((select 'true' from likes
                            where like_from = (select user_idx from users where user_id = "aabbccc")
                            and like_to = card_id), 'false') as card_like_yn,
               (select count('true') from likes where like_to = card_id) as card_like_cnt,
               card_repost_cnt, card_link, card_related_keyword, card_regist_date, card_update_date
        from cards c left join users u
            on c.fk_card_user_idx = u.user_idx
        left join words w
            on c.card_word_id = w.word_id
        where card_id = #{cardId}
        and card_delete_date is null;
    </select>

    <!--  카드 목록 조회 -->
    <!--  글쓴 유저 아이디를 user_id로 가져오기 때문에 혼동을 피하기 위해 watcherId로 현재 페이지 보는 userId 설정  -->
    <!--  오직 카드 목록 조회 쿼리에서만 watcherId 사용, <sql/>도 카드 목록 용으로만 사용  -->
    <select id="getCardList" parameterType="map" resultMap="CardDTOResultMap">
        select user_id, user_nickname, user_intro, user_img,
               word_id, word_name_kr, word_name_en, word_summ,
               (<include refid="wordCategoryLoad"></include>) as word_category,
               card_origin_card_id, card_origin_card_id as oci,
               (select u.user_nickname <include refid="originUserInfoLoad"></include>) as card_origin_user_nickname,
               (select u.user_img <include refid="originUserInfoLoad"></include>) as card_origin_user_img,
               (select card_content
                    from cards
                    where card_id = oci) as card_origin_card_content,
                    card_id, card_content,
               ifnull((select 'true' from likes
                            where like_from = (select user_idx from users where user_id = #{watcherId})
                            and like_to = card_id), 'false') as card_like_yn,
               (select count('true') from likes where like_to = card_id) as card_like_cnt,
               card_repost_cnt, card_regist_date, card_update_date
        from users u right join cards c
        on u.user_idx = c.fk_card_user_idx
        left join words w
        on c.card_word_id = word_id
        where u.user_idx in (<include refid="userFollowIdx"></include>)
        and card_delete_date is null
        limit #{scroll}, 10;
    </select>
</mapper>